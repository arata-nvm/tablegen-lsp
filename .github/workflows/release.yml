name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"${VERSION}\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      
      - name: Check that tag version and package.json version are the same
        shell: bash
        run: |
          if ! grep -q "\"version\": \"${VERSION}\"," vscode/package.json; then
            echo "version does not match package.json" >&2
            exit 1
          fi

      - name: Create GitHub release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create ${VERSION} --draft --verify-tag --title ${VERSION}
    outputs:
      version: ${{ env.VERSION }}

  build-server:
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CROSS_VERSION: v0.2.5
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            strip: x86_64-linux-gnu-strip
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            strip: aarch64-linux-gnu-strip
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            strip: arm-linux-gnueabihf-strip
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Install cross
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/${CROSS_VERSION}/cross-x86_64-unknown-linux-gnu.tar.gz"
          tar xf cross-x86_64-unknown-linux-gnu.tar.gz
          echo "$dir" >> $GITHUB_PATH

      - name: Build release binary (ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          cross build --release --target ${{ matrix.target }} --verbose
          bin="target/${{ matrix.target }}/release/tablegen-lsp-${{ github.ref_name }}-${{ matrix.target }}"
          mv target/${{ matrix.target }}/release/lsp ${bin}
          echo "BIN=${bin}" >> $GITHUB_ENV

      - name: Build release binary (macos)
        if: ${{ matrix.os == 'macos-latest' }}
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose
          bin="target/${{ matrix.target }}/release/tablegen-lsp-${{ github.ref_name }}-${{ matrix.target }}"
          mv target/${{ matrix.target }}/release/lsp ${bin}
          echo "BIN=${bin}" >> $GITHUB_ENV

      - name: Build release binary (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose
          bin="target/${{ matrix.target }}/release/tablegen-lsp-${{ github.ref_name }}-${{ matrix.target }}.exe"
          mv target/${{ matrix.target }}/release/lsp.exe ${bin}
          echo "BIN=${bin}" >> $GITHUB_ENV
      
      - name: Upload release binary
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "${version}" "${{ env.BIN }}"

  build-client:
    needs: ['create-release', 'build-server']
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./vscode
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Download server binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p server
          gh release download "${{ needs.create-release.outputs.version }}" --pattern "tablegen-lsp-*" --dir server
          chmod 0755 server/*
      
      - name: Package client
        run: npm run package
      
      - name: Upload client
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload "${{ needs.create-release.outputs.version }}" "tablegen-lsp-${{ needs.create-release.outputs.version }}.vsix"

      - name: Publish extension
        shell: bash
        run: npx vsce publish --pat "${{ secrets.VSCE_TOKEN }}" --packagePath "tablegen-lsp-${{ needs.create-release.outputs.version }}.vsix"

  publish-release:
    needs: ['create-release', 'build-server', 'build-client']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release edit "${{ needs.create-release.outputs.version }}" --draft=false