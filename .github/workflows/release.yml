name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"${VERSION}\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi

      - name: Create GitHub release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create ${VERSION} --draft --verify-tag --title ${VERSION}
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CROSS_VERSION: v0.2.5
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            strip: x86_64-linux-gnu-strip
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            strip: aarch64-linux-gnu-strip
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            strip: arm-linux-gnueabihf-strip
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Install cross
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/${CROSS_VERSION}/cross-x86_64-unknown-linux-gnu.tar.gz"
          tar xf cross-x86_64-unknown-linux-gnu.tar.gz
          echo "$dir" >> $GITHUB_PATH

      - name: Build release binary (ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          cross build --release --target ${{ matrix.target }} --verbose
          bin="target/${{ matrix.target }}/release/tablegen-lsp-${{ github.ref_name }}-${{ matrix.target }}"
          mv target/${{ matrix.target }}/release/lsp ${bin}
          echo "BIN=${BIN}" >> $GITHUB_ENV

      - name: Build release binary (macos)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose
          bin="target/${{ matrix.target }}/release/tablegen-lsp-${{ github.ref_name }}-${{ matrix.target }}"
          mv target/${{ matrix.target }}/release/lsp ${bin}
          echo "BIN=${BIN}" >> $GITHUB_ENV

      - name: Build release binary (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose
          bin="target/${{ matrix.target }}/release/tablegen-lsp-${{ github.ref_name }}-${{ matrix.target }}.exe"
          mv target/${{ matrix.target }}/release/lsp.exe ${bin}
          echo "BIN=${BIN}" >> $GITHUB_ENV
      
      - name: Upload release binary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "${version}" "${{ env.BIN }}"
