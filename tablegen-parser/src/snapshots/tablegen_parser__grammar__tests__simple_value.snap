---
source: tablegen-parser/src/grammar.rs
expression: "parse(\"class Foo<int A = 1, string B = \\\"hoge\\\", bit D = false, int E = ?, bits<2> F = {0, 1}, list<int> G = [1, 2], dag H = (add A:$hoge), int I = A, int J = !add(A, B), int K = !cond(false: 1, true: 2)> {\n                code C = [{ true }];\n            }\")"
---
File
  StatementList
    Class
      Class `class`
      Whitespace ` `
      Identifier
        Id `Foo`
      TemplateArgList
        Less `<`
        TemplateArgDecl
          IntType
            Int `int`
          Whitespace ` `
          Identifier
            Id `A`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            Integer
              IntVal `1`
        Comma `,`
        Whitespace ` `
        TemplateArgDecl
          StringType
            String `string`
          Whitespace ` `
          Identifier
            Id `B`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            String
              StrVal `\"hoge\"`
        Comma `,`
        Whitespace ` `
        TemplateArgDecl
          BitType
            Bit `bit`
          Whitespace ` `
          Identifier
            Id `D`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            Boolean
              FalseVal `false`
        Comma `,`
        Whitespace ` `
        TemplateArgDecl
          IntType
            Int `int`
          Whitespace ` `
          Identifier
            Id `E`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            Uninitialized
              Question `?`
        Comma `,`
        Whitespace ` `
        TemplateArgDecl
          BitsType
            Bits `bits`
            Less `<`
            Integer
              IntVal `2`
            Greater `>`
          Whitespace ` `
          Identifier
            Id `F`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            Bits
              ValueList
                LBrace `{`
                Value
                  Integer
                    IntVal `0`
                Comma `,`
                Whitespace ` `
                Value
                  Integer
                    IntVal `1`
                RBrace `}`
        Comma `,`
        Whitespace ` `
        TemplateArgDecl
          ListType
            List `list`
            Less `<`
            IntType
              Int `int`
            Greater `>`
          Whitespace ` `
          Identifier
            Id `G`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            List
              ValueList
                LSquare `[`
                Value
                  Integer
                    IntVal `1`
                Comma `,`
                Whitespace ` `
                Value
                  Integer
                    IntVal `2`
                RSquare `]`
        Comma `,`
        Whitespace ` `
        TemplateArgDecl
          DagType
            Dag `dag`
          Whitespace ` `
          Identifier
            Id `H`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            Dag
              LParen `(`
              DagArg
                Value
                  Identifier
                    Id `add`
              Whitespace ` `
              DagArgList
                DagArg
                  Value
                    Identifier
                      Id `A`
                  Colon `:`
                  VarName
                    VarName `$hoge`
              RParen `)`
        Comma `,`
        Whitespace ` `
        TemplateArgDecl
          IntType
            Int `int`
          Whitespace ` `
          Identifier
            Id `I`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            Identifier
              Id `A`
        Comma `,`
        Whitespace ` `
        TemplateArgDecl
          IntType
            Int `int`
          Whitespace ` `
          Identifier
            Id `J`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            BangOperator
              XAdd `!add`
              LParen `(`
              Value
                Identifier
                  Id `A`
              Comma `,`
              Whitespace ` `
              Value
                Identifier
                  Id `B`
              RParen `)`
        Comma `,`
        Whitespace ` `
        TemplateArgDecl
          IntType
            Int `int`
          Whitespace ` `
          Identifier
            Id `K`
          Whitespace ` `
          Equal `=`
          Whitespace ` `
          Value
            CondOperator
              XCond `!cond`
              LParen `(`
              CondClause
                Value
                  Boolean
                    FalseVal `false`
                Colon `:`
                Whitespace ` `
                Value
                  Integer
                    IntVal `1`
              Comma `,`
              Whitespace ` `
              CondClause
                Value
                  Boolean
                    TrueVal `true`
                Colon `:`
                Whitespace ` `
                Value
                  Integer
                    IntVal `2`
              RParen `)`
        Greater `>`
      Whitespace ` `
      RecordBody
        ParentClassList
        Body
          LBrace `{`
          Whitespace `\n                `
          FieldDef
            CodeType
              Code `code`
            Whitespace ` `
            Identifier
              Id `C`
            Whitespace ` `
            Equal `=`
            Whitespace ` `
            Value
              Code
                CodeFragment `[{ true }]`
            Semi `;`
          Whitespace `\n            `
          RBrace `}`

